const morpheusToSwagger = input => {
  const { models, routes } = input;

  const successResponse = {
    '200': {
      description: 'success'
    }
  };

  const objectify = arr => arr.reduce((arr, a) => Object.assign(arr, a));

  const toSwaggerType = tpe => {
    const scalaToSwagger = {
      String: 'string',
      Int: 'number'
    };
    return scalaToSwagger[tpe] || tpe;
  }

  const getRouteParamName = ({ name = 'unknown' }) => name;

  const getRoutePath = ({ route }) => route.reduce((path, part) => {
    if (part.str) return `${path}/${part.str}`;
    if (part.routeParam) return `${path}/{${getRouteParamName(part.routeParam)}}`;
    return path;
  }, '');

  const getRouteParameters = (route) => {
    const pathParams = route.route
      .filter(part => Object.keys(part).indexOf('routeParam') !== -1)
      .map(({ routeParam }) => ({
        in: 'path',
        name: getRouteParamName(routeParam),
        required: routeParam.required,
        type: toSwaggerType(routeParam.tpe.name)
      }));

    const { params = [], body } = route;
    const queryParams = params.map(param => ({
      in: 'query',
      name: param.name,
      required: param.required,
      type: toSwaggerType(param.tpe.name)
    }));

    const bodyParams = body ? [{
      in: 'body',
      name: 'body',
      required: true,
      schema: {
        $ref: `#/definitions/${body.tpe.name}`
      }
    }] : [];

    return [...pathParams, ...queryParams, ...bodyParams];
  };


  const paths = routes.map(route => {
    const path = getRoutePath(route);
    const parameters = getRouteParameters(route);

    return {
      [path]: {
        [route.method]: {
          summary: route.desc,
          consumes: [
            'application/json'
          ],
          produces: [
            'application/json'
          ],
          parameters,
          responses: successResponse //TODO: use actual return types
        }
      }
    }
  });

  const definitions = models.map(model => ({
    [model.name]: {
      type: 'object',
      properties: objectify(model.members.map(member => ({
        [member.name]: {
          type: toSwaggerType(member.tpe.name),
          description: member.desc
        }
      })))
    }
  }));

  const swaggerSpec = {
    swagger: '2.0',
    info: {
      description: 'Autogenerated swagger spec',
      version: '0.1.0',
      title: 'metarpheus-swagger',
    },
    paths: objectify(paths),
    definitions: objectify(definitions)
  };

  return swaggerSpec;

};

module.exports = morpheusToSwagger;
